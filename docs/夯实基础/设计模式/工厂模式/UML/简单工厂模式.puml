@startuml

abstract class Pizza{
    abstract void prepare()
    void bake()
    void cut()
    void box()
}
class CheessPizza{
    void prepare()
}
class GreekPizza{
    void prepare()
}
class PepperPizz{
    void prepare()
}
class SimpleFactory{
    Pizza createPizza(String type)
}
class OrderPizza{
    + void simpleFactory()
    - String getType()
}
Pizza <|-- CheessPizza
Pizza <|-- GreekPizza
Pizza <|-- PepperPizz

CheessPizza <.. SimpleFactory
GreekPizza <.. SimpleFactory
PepperPizz <.. SimpleFactory

SimpleFactory <.. OrderPizza
note left of Pizza : "披萨抽象类：抽象准备食材方法，子类根据不同口味进行实现"
note left of CheessPizza : "奶酪披萨"
note left of GreekPizza : "希腊披萨"
note left of PepperPizz : "胡椒披萨"
note left of SimpleFactory : "简单工厂：提供创建对象方法，根据参数返回不同对象"
note left of OrderPizza : "客户端"
@enduml